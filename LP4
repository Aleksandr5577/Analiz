import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt

# ================Задание 1 ========================

np.random.seed(42)
X = 2 * np.random.rand(100, 1)  # один признак
y = 4 + 3 * X + np.random.randn(100, 1)  # целевая переменная с небольшим шумом

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print("Размер обучающей выборки X:", X_train.shape)
print("Размер тестовой выборки X:", X_test.shape)
print("Размер обучающей выборки y:", y_train.shape)
print("Размер тестовой выборки y:", y_test.shape)

# ================Задание 2 ========================

# Создаем и обучаем модель линейной регрессии
model = LinearRegression()
model.fit(X_train, y_train)

# Делаем предсказания на тестовой выборке
y_pred = model.predict(X_test)

# Оцениваем качество модели
mse = mean_squared_error(y_test, y_pred)
print("Среднеквадратичная ошибка на тестовой выборке:", mse)

# ================Задание 3========================

# Построение точечных графиков исходных данных
plt.scatter(X_train, y_train, color='blue', label='Обучающие данные')
plt.scatter(X_test, y_test, color='red', label='Тестовые данные')

# Построение графика линии регрессии
plt.plot(X_test, y_pred, color='green', linewidth=2, label='Линия регрессии')

plt.xlabel('Признак')
plt.ylabel('Целевая переменная')
plt.legend()
plt.show()
